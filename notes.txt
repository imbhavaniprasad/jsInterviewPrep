First-class functions refer to the concept that functions are treated like any other variable.

function decleration aka function statement :
function hi(){
    console.log("hii)
}
//Intersection Observer

The Intersection Observer is a JavaScript API that allows you to observe changes in the intersection (visibility) of a target element with respect to an ancestor element or the viewport. Itâ€™s often used to trigger animations or load content lazily (such as images) when an element comes into view, enhancing performance and user experience.
Use cases :

Lazy-loading images: Load images only when they are in or near the viewport.
Infinite scrolling: Load more content when the user scrolls to the bottom of the page.
Animations: Trigger animations when elements come into view (e.g., fade in).
Tracking visibility: Track when certain elements (ads, videos, etc.) become visible.

ex: const target = document.querySelector('.targetElement');

// Callback function that executes when the target intersects
const callback = (entries, observer) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      console.log('Element is in view!');
    } else {
      console.log('Element is out of view!');
    }
  });
};

// Create a new IntersectionObserver
const observer = new IntersectionObserver(callback, {
  root: null, // Default is the viewport
  rootMargin: '0px', // Margin around the root (viewport)
  threshold: 0.5 // Percentage of the target's visibility (0.5 = 50%)
});

// Start observing the target element
observer.observe(target);
